{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSE.py CSE.py is a small, asynchronous wrapper around the Google Programmable Search Engine. Features Completely asynchronous API 100% API coverage Fully typed code Image searching SafeSearch toggleable Documentation Content API References API Interaction Exceptions Quickstart Guild Examples Basic Advance","title":"Home"},{"location":"#csepy","text":"CSE.py is a small, asynchronous wrapper around the Google Programmable Search Engine.","title":"CSE.py"},{"location":"#features","text":"Completely asynchronous API 100% API coverage Fully typed code Image searching SafeSearch toggleable","title":"Features"},{"location":"#documentation-content","text":"API References API Interaction Exceptions Quickstart Guild Examples Basic Advance","title":"Documentation Content"},{"location":"quick-start/","text":"Quickstart Guild Installing CSE.py Using PIP pip install -U cse.py Using GIT pip install -U git+https://github.com/Hype3808/cse.py API Key Get Your Api Key Getting Started Easy example import cse import asyncio engine = cse.Engine(\"your_api_key\") async def main(): results = await engine.search(\"query\") print(results) # this will returns a list of results asyncio.get_event_loop().run_until_complete(main())","title":"Quick Start"},{"location":"quick-start/#quickstart-guild","text":"","title":"Quickstart Guild"},{"location":"quick-start/#installing-csepy","text":"","title":"Installing CSE.py"},{"location":"quick-start/#using-pip","text":"pip install -U cse.py","title":"Using PIP"},{"location":"quick-start/#using-git","text":"pip install -U git+https://github.com/Hype3808/cse.py","title":"Using GIT"},{"location":"quick-start/#api-key","text":"Get Your Api Key","title":"API Key"},{"location":"quick-start/#getting-started","text":"","title":"Getting Started"},{"location":"quick-start/#easy-example","text":"import cse import asyncio engine = cse.Engine(\"your_api_key\") async def main(): results = await engine.search(\"query\") print(results) # this will returns a list of results asyncio.get_event_loop().run_until_complete(main())","title":"Easy example"},{"location":"api/api-interaction/","text":"API Interaction Client class cse.Engine(api_key: str,*, engine_id: str=\"015786823554162166929:mywctwj8es4\", image_engine_id: str=\"015786823554162166929:szgrbbrrox0\", session: aiohttp.ClietSession=None) Atributes api_key Get your Google API Key from here Type: str engine_id Type: Optional[ str ] image_engine_id Type: Optional[ str ] session Type: Optional[ aiohttp.ClientSession ] Method Search await search(query: str,*, safesearch=True, image_search=False) Search for a query Parameters: query (str) - The query you want to search for safesearch (Optional[ bool ]) - It won't search for NSFW content if True. Default: True image_search (Optional[ bool ]) - It won't get any image if False Default: False Returns: Return Type: Optional[ list ] Close await close() Close the connection Parameters: None Result class cse.Result title The title of the search result Returns: Type: Optional[ str ] description A short description of your search result Returns: Type: Optional[ str ] url The link of your search result Returns: Type: str image_url The image link of your search result Returns: Type: Optional[ str ]","title":"API Interaction"},{"location":"api/api-interaction/#api-interaction","text":"","title":"API Interaction"},{"location":"api/api-interaction/#client","text":"class cse.Engine(api_key: str,*, engine_id: str=\"015786823554162166929:mywctwj8es4\", image_engine_id: str=\"015786823554162166929:szgrbbrrox0\", session: aiohttp.ClietSession=None)","title":"Client"},{"location":"api/api-interaction/#atributes","text":"","title":"Atributes"},{"location":"api/api-interaction/#api_key","text":"Get your Google API Key from here Type: str","title":"api_key"},{"location":"api/api-interaction/#engine_id","text":"Type: Optional[ str ]","title":"engine_id"},{"location":"api/api-interaction/#image_engine_id","text":"Type: Optional[ str ]","title":"image_engine_id"},{"location":"api/api-interaction/#session","text":"Type: Optional[ aiohttp.ClientSession ]","title":"session"},{"location":"api/api-interaction/#method","text":"","title":"Method"},{"location":"api/api-interaction/#search","text":"await search(query: str,*, safesearch=True, image_search=False) Search for a query Parameters: query (str) - The query you want to search for safesearch (Optional[ bool ]) - It won't search for NSFW content if True. Default: True image_search (Optional[ bool ]) - It won't get any image if False Default: False Returns: Return Type: Optional[ list ]","title":"Search"},{"location":"api/api-interaction/#close","text":"await close() Close the connection Parameters: None","title":"Close"},{"location":"api/api-interaction/#result","text":"class cse.Result","title":"Result"},{"location":"api/api-interaction/#title","text":"The title of the search result Returns: Type: Optional[ str ]","title":"title"},{"location":"api/api-interaction/#description","text":"A short description of your search result Returns: Type: Optional[ str ]","title":"description"},{"location":"api/api-interaction/#url","text":"The link of your search result Returns: Type: str","title":"url"},{"location":"api/api-interaction/#image_url","text":"The image link of your search result Returns: Type: Optional[ str ]","title":"image_url"},{"location":"api/exceptions/","text":"Base Exception class NoResults Raised when there is no results for the query you search for class APIError Raised when internal API error class NoMoreRequests Raised when your api key's daily limitation (100/day) reached","title":"Exceptions"},{"location":"api/exceptions/#base-exception","text":"class NoResults Raised when there is no results for the query you search for class APIError Raised when internal API error class NoMoreRequests Raised when your api key's daily limitation (100/day) reached","title":"Base Exception"},{"location":"examples/basic/","text":"Basic Example import asyncio import cse import os from dotenv import load_dotenv # pip install python-dotenv # your .env file # CSE_API_KEY = your_api_key load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) async def main(): result = await engine.search(\"query\", safesearch=True, image_search=True) print(result[0].title) # title of the query you search for print(result[0].description) # short description of your query print(result[0].url) # url of your query try: print(result[0].image_url) # image url of the query you search except: return # if will not print the image url if no image were found in the query asyncio.get_event_loop().run_until_complete(main())","title":"Basic Example"},{"location":"examples/basic/#basic-example","text":"import asyncio import cse import os from dotenv import load_dotenv # pip install python-dotenv # your .env file # CSE_API_KEY = your_api_key load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) async def main(): result = await engine.search(\"query\", safesearch=True, image_search=True) print(result[0].title) # title of the query you search for print(result[0].description) # short description of your query print(result[0].url) # url of your query try: print(result[0].image_url) # image url of the query you search except: return # if will not print the image url if no image were found in the query asyncio.get_event_loop().run_until_complete(main())","title":"Basic Example"},{"location":"examples/dpy-example/","text":"Discord.py Basic Example import discord from discord.ext import commands import os import cse from dotenv import load_dotenv # pip install python-dotenv # your .env file # CSE_API_KEY = your_api_key load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) bot = commands.Bot(command_prefix='!') engine = cse.Engine(api_key) @bot.command() async def google(ctx,*,query): result = await engine.search(query, safesearch=True) em=discord.Embed(title=query, description=result[0].title, url=result[0].url, color=discord.Color.blue()) em.add_field(name=\"Description:\", value=result[0].description) await ctx.send(embed=em) bot.run(\"you_super_secret_token\") Discord.py Cog Example # cogs.google import cse import discord from discord.ext import commands import os from dotenv import load_dotenv # pip install python-dotenv load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) class GoogleCog(commands.Cog): def __init__(self, bot): self.bot = bot @commands.command() async def google(self, ctx,*,query): result = await engine.search(query, safesearch=True) em=discord.Embed(title=query, description=result[0].title, url=result[0].url, color=discord.Color.blue()) em.add_field(name=\"Description:\", value=result[0].description) await ctx.send(embed=em) def setup(bot): bot.add_cog(GoogleCog(bot)) import discord from discord.ext import commands # your .env file # CSE_API_KEY = your_api_key bot.load_extension(\"cogs.google\") bot.run(\"you_super_secret_token\")","title":"Discord.py Cog Example"},{"location":"examples/dpy-example/#discordpy-basic-example","text":"import discord from discord.ext import commands import os import cse from dotenv import load_dotenv # pip install python-dotenv # your .env file # CSE_API_KEY = your_api_key load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) bot = commands.Bot(command_prefix='!') engine = cse.Engine(api_key) @bot.command() async def google(ctx,*,query): result = await engine.search(query, safesearch=True) em=discord.Embed(title=query, description=result[0].title, url=result[0].url, color=discord.Color.blue()) em.add_field(name=\"Description:\", value=result[0].description) await ctx.send(embed=em) bot.run(\"you_super_secret_token\")","title":"Discord.py Basic Example"},{"location":"examples/dpy-example/#discordpy-cog-example","text":"# cogs.google import cse import discord from discord.ext import commands import os from dotenv import load_dotenv # pip install python-dotenv load_dotenv() api_key = os.getenv('CSE_API_KEY') engine = cse.Engine(api_key) class GoogleCog(commands.Cog): def __init__(self, bot): self.bot = bot @commands.command() async def google(self, ctx,*,query): result = await engine.search(query, safesearch=True) em=discord.Embed(title=query, description=result[0].title, url=result[0].url, color=discord.Color.blue()) em.add_field(name=\"Description:\", value=result[0].description) await ctx.send(embed=em) def setup(bot): bot.add_cog(GoogleCog(bot)) import discord from discord.ext import commands # your .env file # CSE_API_KEY = your_api_key bot.load_extension(\"cogs.google\") bot.run(\"you_super_secret_token\")","title":"Discord.py Cog Example"}]}